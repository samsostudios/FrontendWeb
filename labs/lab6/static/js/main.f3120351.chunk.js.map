{"version":3,"sources":["palette.js","PaletteList.js","App.js","serviceWorker.js","index.js"],"names":["Palette","colorCard","width","height","backgroundColor","display","alignItems","flexDirection","margin","borderRadius","infoSection","justifyContent","borderBottomLeftRadius","borderBottomRightRadius","react_default","a","createElement","style","gridTemplateColumns","this","props","entries","map","item","key","borderTopLeftRadius","borderTopRightRadius","colorR","colorG","colorB","Component","PaletteList","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","palettes","counter","generateColor","bind","assertThisInitialized","e","newPalette","Math","floor","random","push","setState","preventDefault","onClick","padding","fontSize","border","background","palette_Palette","App","className","PaletteList_PaletteList","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2MAEqBA,mLAEb,IAAIC,EAAU,CACVC,MAAO,OACPC,OAAQ,OACRC,gBAAiB,UACjBC,QAAS,OACTC,WAAY,SACZC,cAAe,SACfC,OAAQ,QACRC,aAAc,mBAEdC,EAAY,CACZR,MAAO,OACPC,OAAQ,MACRC,gBAAiB,UACjBC,QAAS,OACTE,cAAe,SACfI,eAAgB,SAChBL,WAAY,SACZM,uBAAwB,MACxBC,wBAAyB,OAiB7B,OACIC,EAAAC,EAAAC,cAAA,OAAKC,MAhBW,CAChBf,MAAO,OACPG,QAAS,OACTa,oBAAqB,6BAaSC,KAAKC,MAAMC,QAAQC,IAVrD,SAAwBC,GACpB,OAAOT,EAAAC,EAAAC,cAAA,OAAKC,MAAOhB,EAAWuB,IAAKD,EAAKC,KAC5BV,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAACf,MAAO,OAAQC,OAAQ,OAAQsB,oBAAqB,MAAOC,qBAAsB,MAAOtB,gBAAiB,OAAOmB,EAAKI,OAAO,IAAIJ,EAAKK,OAAO,IAAIL,EAAKM,OAAO,OACzKf,EAAAC,EAAAC,cAAA,OAAKC,MAAOP,GAAZ,QACUa,EAAKI,OADf,KACyBJ,EAAKK,OAD9B,KACwCL,EAAKM,mBAjChCC,aCChBC,cACjB,SAAAA,EAAYX,GAAM,IAAAY,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAd,KAAAY,IACdC,EAAAC,OAAAE,EAAA,EAAAF,CAAAd,KAAAc,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAlB,KAAMC,KACDkB,MAAM,CACPC,SAAU,GACVC,QAAS,GAEbR,EAAKS,cAAcT,EAAKS,cAAcC,KAAnBT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KANLA,6EASJY,GACV,IAAMC,EAAa,CACfrB,IAAKL,KAAKmB,MAAME,QAAS,EACzBb,OAAQmB,KAAKC,MAAoB,IAAdD,KAAKE,UACxBpB,OAAQkB,KAAKC,MAAoB,IAAdD,KAAKE,UACxBnB,OAAQiB,KAAKC,MAAoB,IAAdD,KAAKE,WAG5B7B,KAAKmB,MAAMC,SAASU,KAAKJ,GAGzB1B,KAAK+B,SAAS,CACVX,SAAUpB,KAAKmB,MAAMC,SACrBC,QAASrB,KAAKmB,MAAME,QAAU,IAGlCI,EAAEO,kDAqCF,OACIrC,EAAAC,EAAAC,cAAA,OAAKC,MAlCO,CACZf,MAAO,QACPC,OAAQ,QACRC,gBAAiB,UACjBC,QAAS,OACTE,cAAe,SACfI,eAAgB,aAChBL,WAAY,WA4BRQ,EAAAC,EAAAC,cAAA,OAAKC,MA1BK,CACdf,MAAO,QACPC,OAAQ,OACRC,gBAAiB,UACjBC,QAAS,OACTE,cAAe,SACfI,eAAgB,SAChBL,WAAY,WAoBJQ,EAAAC,EAAAC,cAAA,qCACAF,EAAAC,EAAAC,cAAA,UAAQoC,QAASjC,KAAKsB,cAAexB,MAnBjC,CACZoC,QAAS,YACTC,SAAU,MACVC,OAAQ,MACR9C,aAAc,QACd+C,WAAY,6CAcJ,aAEJ1C,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACyC,EAAD,CAASpC,QAASF,KAAKmB,MAAMC,oBAtERT,aCU1B4B,mLARX,OACE5C,EAAAC,EAAAC,cAAA,OAAK2C,UAAU,OACb7C,EAAAC,EAAAC,cAAC4C,EAAD,cAJU9B,aCSE+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOrD,EAAAC,EAAAC,cAACoD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.f3120351.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nexport default class Palette extends Component {\n    render() {\n        var colorCard={\n            width: \"10vw\",\n            height: \"15vh\",\n            backgroundColor: \"#f4f4f4\",\n            display: \"flex\",\n            alignItems: \"center\",\n            flexDirection: \"column\",\n            margin: \"1em 0\",\n            borderRadius: \"2em 2em 2em 2em\"\n        }\n        var infoSection={\n            width: \"10vw\",\n            height: \"5vh\",\n            backgroundColor: \"#f4f4f4\",\n            display: \"flex\",\n            flexDirection: \"column\",\n            justifyContent: \"center\",\n            alignItems: \"center\",\n            borderBottomLeftRadius: \"1em\",\n            borderBottomRightRadius: \"1em\"\n        }\n        var paletteDivStyle={\n            width: \"80vw\",\n            display: \"grid\",\n            gridTemplateColumns: \"auto auto auto auto auto\",\n            \n        }\n        function createPalettes(item){\n            return <div style={colorCard} key={item.key}> \n                        <div style={{width: '10vw', height: '15vh', borderTopLeftRadius: \"1em\", borderTopRightRadius: \"1em\", backgroundColor: 'rgb('+item.colorR+','+item.colorG+','+item.colorB+')',}}></div>\n                        <div style={infoSection}>\n                            rgb: {item.colorR}, {item.colorG}, {item.colorB}\n                        </div>\n                        \n                    </div>\n        }\n        return(\n            <div style={paletteDivStyle}>{this.props.entries.map(createPalettes)}</div>\n        )\n    }\n}\n","import React, { Component } from 'react';\nimport Palette from './palette';\n\nexport default class PaletteList extends Component {\n    constructor(props){\n        super(props);\n        this.state={\n            palettes: [],\n            counter: 0\n        };\n        this.generateColor=this.generateColor.bind(this);\n    }\n\n    generateColor(e){\n        const newPalette = {\n            key: this.state.counter +1,\n            colorR: Math.floor(Math.random()*255),\n            colorG: Math.floor(Math.random()*255),\n            colorB: Math.floor(Math.random()*255)\n        }\n        //add new palette to palettes list\n        this.state.palettes.push(newPalette);\n        \n        //update component state\n        this.setState({\n            palettes: this.state.palettes,\n            counter: this.state.counter + 1\n        });\n\n        e.preventDefault();\n    }\n\n    render() {\n        var listWrapper={\n            width: \"100vw\",\n            height: \"100vh\",\n            backgroundColor: \"#1e1e1e\",\n            display: \"flex\",\n            flexDirection: \"column\",\n            justifyContent: \"flex-start\",\n            alignItems: \"center\"\n        }\n        var headerSeciton={\n            width: \"100vw\",\n            height: \"20vh\",\n            backgroundColor: \"#f4f4f4\",\n            display: \"flex\",\n            flexDirection: \"column\",\n            justifyContent: \"center\",\n            alignItems: \"center\"\n        }\n        var buttonStyle={\n            padding: \"1em 2.5em\",\n            fontSize: \"1em\",\n            border: \"0px\",\n            borderRadius: \"2.5em\",\n            background: \"linear-gradient(90deg, #A593E0, #CBA6C3)\"\n        }\n        // var listArea={\n        //     width: \"80vw\",\n        //     backgroundColor: \"#0000ff\",\n        //     display: \"flex\",\n        //     flexDirection: \"row\",\n        //     alignItems: \"center\",\n        //     justifyContent: \"center\"\n        // }\n        return (\n            <div style={listWrapper}>\n                <div style={headerSeciton}>\n                    <h1>Generate Color Palette!</h1>\n                    <button onClick={this.generateColor} style={buttonStyle}>Generate</button>\n                </div>\n                <div>\n                    <Palette entries={this.state.palettes} />\n                </div>\n                \n            </div>\n        )\n    }\n}","import React, { Component } from 'react';\nimport PalletList from './PaletteList';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <PalletList />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}